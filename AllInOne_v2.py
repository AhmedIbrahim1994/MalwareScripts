#!/bin/python
# Developped by Ahmed Ibrahim <engahmedibrahim1994@gmail.com>

import sys
import os
import time
import json
import requests
import argparse
import re
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from dateutil.parser import parse


today = time.strftime("%Y-%m-%d")

malshare_var = {
"BASE_URL" : "http://malshare.com/",
"DOWNLOAD" : "api.php?api_key=%s&action=getfile&hash=%s",
"TYPE" : "api.php?api_key=%s&action=type&type=%s",
"FILE_TYPE" : "ELF",
"API_KEY" : "84edbc35fe7d3c408099e9b1955ed65122e4542af65797d93d6d4799f6098fcf" 
}

hybrid_analysis_var = {
"headers": {
    'accept': 'application/json',
    'user-agent': 'Falcon Sandbox',
    'api-key': '48wosssk4s4s4k480cskwcssw0cscc0w80k0k8s800sg8k4w4g4sg0k88c88sgkc',
    'Content-Type': 'application/x-www-form-urlencoded'
},
"params": {
    '_timestamp': '1538069978495'
},

"data": {
  'filetype': 'elf'
}
}

#selenium
chrome_options = Options()
chrome_options.add_argument('--headless')
chrome_options.add_argument('--no-sandbox')
chrome_options.add_argument('--disable-dev-shm-usage')

driver = webdriver.Chrome("/usr/lib/chromium-browser/chromedriver",chrome_options=chrome_options)

#### Malshare ####
#### Getting All Hashes ####

def main():
	print ("Welcome, Gathering The Samples Of "+today)
	malshare()
	cuckoo()
	hybridanalysis()

def hybridanalysis():
	print ("[*] Hybrid Analysis")
        print ("\t[*] Sending a request to Hybrid Analysis")
        response = requests.post('https://www.hybrid-analysis.com/api/v2/search/terms', headers=hybrid_analysis_var['headers'], params=hybrid_analysis_var['params'], data=hybrid_analysis_var['data'])
        data = response.text
	
	allHashes = "allhashes.json"
	file = open(allHashes,"w")
        file.write(data)
        file.close()

        with open(allHashes) as f:
                data = json.load(f)
	
	count = data['count']

	item_dict = []
	

	#print data["result"][2]["sha256"]

	filename = "HybridAnalysis"
        print "\t[*] Save Into A file " +filename+today+".json"

	fullfilename=filename+today
	for i in range(count):
                #print (data["result"][i]["sha256"])
                sample_date = data["result"][i]["analysis_start_time"]

                if sample_date is None:
                        #print "No Date"
                        continue
                else:
                        date_obj = parse(sample_date)

                        if today == date_obj.strftime("%Y-%m-%d"):
				sha256 = data["result"][i]["sha256"]
				item_dict.append({'sha256':sha256,'date':today})
				with open(fullfilename,'w') as outfile:
                                	json.dump(item_dict, outfile)
                        else:
                                print ("\t[*] No samples for "+today)
                                break
	
	samples_count(item_dict)


        print ("\t[*] Hybrid-Analysis Done")
        print ("\t[+NOTE] If you wanna download the samples from Hybrid Analysis")




def cuckoo():
        print ("[*] Cuckoo")
        print ("\t[*] Build The HTML Page First")
        driver.get('https://linux.huntingmalware.com/analysis/')
        res = driver.execute_script("return document.documentElement.outerHTML")

        driver.quit()

        soup = BeautifulSoup(res, 'lxml')

        print ("\t[*] Getting the Hashes and Samples")
        table = soup.find('table', {'class': 'table table-striped table-responsive'})

        table= soup.find("tbody")

        tr_list = soup.find_all("tr")

        td_list=[]
        for row in table.find_all("tr")[0:]:
                td_list.append(row.find_all("td"))
	
	count = len(td_list)

	item_dict = []
	filename = "cuckoo"+today+".json"

	if count != 0:
		print("\t[*] Store All the ELF hashes in a JSON Format " +filename)
       	 	for td in range(0, count):
                	hash =  td_list[td][2].text
                	date = re.findall("([0-9]{4}\-[0-9]{2}\-[0-9]{2})",td_list[td][1].text)
                	score =  td_list[td][5].text

			if date[0] == today:
         			item_dict.append({'sha256':hash,'date':date,'score':score})

                	with open(filename,'w') as outfile:
                        	json.dump(item_dict, outfile)
		samples_count(item_dict)

	else:
		print "\t[*] No Samples For "+ today
        print "\t[*] Cuckoo Done"




def malshare():
	print ("[*] Malshare")
	print ("\t[*] Getting the Hashes and Samples")
	
	url = malshare_var['TYPE'] % (malshare_var['API_KEY'],malshare_var['FILE_TYPE'] )
	
	print("\t[*] Sending a request to "+malshare_var['BASE_URL']+" get all "+malshare_var["FILE_TYPE"]+" hashes")
	request = api_call(url)
        print("\t[*] Store All the "+malshare_var["FILE_TYPE"]+" hashes in a JSON Format")
	storehashesjson(request)
	
	#print ("\t[*] Malshare Done")

def samples_count (item_dict):
	samples_count = len(item_dict)
	print "\t[*] Samples Count = ", samples_count


def storehashesjson(hashes):
        #store hashes in a json fomat
	json_data = json.dumps(hashes.json(), sort_keys=True, indent=4, separators=(',', ': '))
        hashes_dict = json.loads(json_data)

	#save the Hashes in 
	filename = "malshare"+today+".json"
        print "\t[*] Save Hashes Into File "+filename
        with open(filename,'w') as outfile:
                json.dump(hashes_dict, outfile)
	
	samples_count(hashes_dict)

        print ("\t[*] Download The Samples")

       # for i in range(0, samples_count):
        #        sha256= item_dict[i]['sha256']
        #        url= API_PATHS['DOWNLOAD']%(api_key, sha256)
        #        print url
        #        r = request.get(url)
        #        open(i+datetime+'.elf','wb').write(r.content)




def api_call(request_path):
#        global malshare_var["API_KEY"]
        try:
                user_agent = {'User-Agent': 'MalShare API Tool v/0.1 beta'}
                request = requests.get(malshare_var["BASE_URL"] + request_path, headers=user_agent)
                if request.status_code == 200:
                        if standard_error_check(request.content):
                                return request

                else:
                        if standard_error_check(request.content):
                                print ("[X] API Call Failed")
                                return None
                        else:
                                return None



        except Exception as e:
                print ("[X] API Call Failed: %s" % e)
                return None


def standard_error_check(rtext):
        if (rtext == "Sample not found"):
                print ("[X] Sample not Found")
                return False

        if (rtext == "ERROR! => Account not activated"):
                print ("[X] Bad API Key")
                return False

        if (rtext == "Invalid Hash"):
                print ("[X] Invalid Hash")
                return False

        if ( "Sample not found by hash" in rtext ):
                print ("[X] Hash not found")
                return False

        return True


if __name__ == "__main__":
        main()




