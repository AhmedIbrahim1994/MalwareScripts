#!/bin/python
# Created by Ahmed Ibrahim <engahmedibrahim1994@gmail.com>

import os
import re
import json
import argparse
import requests
import time

BASE_HTTP_PATH = "http://malshare.com/"
API_PATHS = {
                                "DOWNLOAD" : "api.php?api_key=%s&action=getfile&hash=%s",
                                "TYPE" : "api.php?api_key=%s&action=type&type=ELF",
                        }

api_key = "84edbc35fe7d3c408099e9b1955ed65122e4542af65797d93d6d4799f6098fcf"
file_type = "ELF"
datetime = time.strftime("%Y-%m-%d")


def main():
	uri = API_PATHS['TYPE'] % (api_key)
	print uri

	#Get All Hashes
	hashrequest = api_call(uri)
	#print r.text.strip()
	#Sore all hashed in a json file
	storehashesjson(hashrequest)
	
	for i in range(0, samples_count):
        sha256= item_dict[i]['sha256']
        url= API_PATHS['TYPE']%(api_key, sha256)
        print url
        r = request.get(url)
        open(i+datetime+'.elf','wb').write(r.content)


	
	


	


def storehashesjson(hashes):
	#Strore al hashes on a json file
        json_data = json.dumps(hashes.json(), sort_keys=True, indent=4, separators=(',', ': '))

        

        #Cont how many hashes?

	item_dict = json.loads(json_data)
        samples_count = len(item_dict)
	
	
	#Print Samples_Count
        #print "\n**********\nSamples Count = ",samples_count,"\n**********\n"

	#Print in a well organized JSON format
        #print "\n********** Organized JSON\n",json_data,"\n**********\n"

        #Print in A Raw JSON Format
        #print "\n********** RAW JSON\n",item_dict,"\n**********\n"

        #Save OutPut in a JSON Format
        print "********** SAVE Data Into File"
        datetime = time.strftime("%Y-%m-%d")
        filename = "malshare"+datetime+".json"

        print "Save Into File "+filename
        with open(filename,'w') as outfile:
                json.dump(item_dict, outfile)
        print "DONE"
        print "**********"







def api_call(rpath):
        global api_key
        try:
                user_agent = {'User-Agent': 'MalShare API Tool v/0.1 beta'}
                r = requests.get(BASE_HTTP_PATH + rpath, headers=user_agent)

                if r.status_code == 200:
                        if standard_error_check(r.content):
				return r
                else:
                        if standard_error_check(r.content):
                                print "[X] API Call Failed"
                                return None
                        else:
                                return None



        except Exception, e:
                print "[X] API Call Failed: %s" % e
                return None

def standard_error_check(rtext):
        if (rtext == "Sample not found"):
                print "[X] Sample not Found"
                return False

        if (rtext == "ERROR! => Account not activated"):
                print "[X] Bad API Key"
                return False

        if (rtext == "Invalid Hash"):
                print "[X] Invalid Hash"
                return False

        if ( "Sample not found by hash" in rtext ):
                print "[X] Hash not found"
                return False

        return True

		





if __name__ == "__main__":
        main()

