#!/bin/python
# Developped by Ahmed Ibrahim <engahmedibrahim1994@gmail.com>

import sys
import os
import time
import json
import requests
import argparse
import re
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from dateutil.parser import parse



##### Malshare Variables ######

malshare_base_http_path = "http://malshare.com/"
api_paths = {
	"DOWNLOAD" : "api.php?api_key=%s&action=getfile&hash=%s",
	"TYPE" : "api.php?api_key=%s&action=type&type=%s",
                        }

malshare_api_key = "84edbc35fe7d3c408099e9b1955ed65122e4542af65797d93d6d4799f6098fcf"
file_type = "ELF"

url = api_paths['TYPE'] % (malshare_api_key, file_type)
today = time.strftime("%Y-%m-%d")

###### Cuckoo Variables ######
chrome_options = Options()
chrome_options.add_argument('--headless')
chrome_options.add_argument('--no-sandbox')
chrome_options.add_argument('--disable-dev-shm-usage')

driver = webdriver.Chrome("/usr/lib/chromium-browser/chromedriver",chrome_options=chrome_options)

###### Hybrid Analysis ######
headers = {
    'accept': 'application/json',
    'user-agent': 'Falcon Sandbox',
    'api-key': '48wosssk4s4s4k480cskwcssw0cscc0w80k0k8s800sg8k4w4g4sg0k88c88sgkc',
    'Content-Type': 'application/x-www-form-urlencoded',
}

params = (
    ('_timestamp', '1538069978495'),
)

datahybrid = {
  'filetype': 'elf'
}





###### Malshare ######
#### Getting All Hashes ####

def main():
	print ("Welcome Gathering Sample for"+today)
	print ("[*] Malshare")
	print ("\t[*] Getting the Hashes and Samples")
	malshare()
	cuckoo()
	hybridanalysis()


def hybridanalysis():
	print ("[*] Hybrid Analysis")
        print ("\t[*] Sending a request to Hybrid Analysis")	
	response = requests.post('https://www.hybrid-analysis.com/api/v2/search/terms', headers=headers, params=params, data=datahybrid)
	data = response.text

	datetime = time.strftime("%Y-%m-%d")
	filename = "HybridAnalysis.json"

	file = open(filename,"w")
	file.write(data)
	file.close()

	with open(filename) as f:
	        data = json.load(f)
	count = data['count']
	filename = "HybridAnalysis"
	print "\t[*] Save Into A file" +filename+today+".json"
	for i in range(count):
        	#print (data["result"][i]["sha256"])
        	sample_date = data["result"][i]["analysis_start_time"]

        	if sample_date is None:
                	#print "No Date"
                	continue
        	else:
                	date_obj = parse(sample_date)

                	if today == date_obj.strftime("%Y-%m-%d"):
                        	print (date["result"][i]["sha256"])

                	else:
                        	print ("\t[*]no samples for "+today)
                        	break
	print ("\t[*] Hybrid-Analysis Done")
	print ("\t [+NOTE] If you wanna download the samples from Hybrid Analysis")



def cuckoo():
        print ("[*] Cuckoo")
        print ("\t[*] Build The HTML Page First")
	driver.get('https://linux.huntingmalware.com/analysis/')
	res = driver.execute_script("return document.documentElement.outerHTML")

	driver.quit()

	soup = BeautifulSoup(res, 'lxml')

	print ("\t[*] Getting the Hashes and Samples")
	table = soup.find('table', {'class': 'table table-striped table-responsive'})

	table= soup.find("tbody")

	tr_list = soup.find_all("tr")

	td_list=[]
	for row in table.find_all("tr")[0:]:
        	td_list.append(row.find_all("td"))

	count = len(td_list)
	print "\t[*] Samples Count ", count , "ALL ELF File"

	print "\t[*] Save Hashes Into A File"	
	item_dict = []
	for td in range(0, count):
	        hash =  td_list[td][2].text
        	date = re.findall("([0-9]{4}\-[0-9]{2}\-[0-9]{2})",td_list[td][1].text)
        	score =  td_list[td][5].text

	        if date[0] == today:
        	        #print ("today is: ",today)
               		#print "hash:", hash, "++" , "date:", date[0] , "++" , "score" ,score
		#	item_dict["sha256:"]=hash
		#	item_dict["date:"]=date[0]
			#print item_dict

			item_dict.append({'sha256':hash,'date':date})
#	print item_dict
	
		filename = "cuckoo"+today+".json"
		with open(filename,'w') as outfile:
             		json.dump(item_dict, outfile)
	print "\t[*] Cuckoo Done"




def malshare():
	url = api_paths['TYPE'] % (malshare_api_key, file_type)
	print("\t[*] Sending a request to "+malshare_base_http_path+" get all "+file_type+" hashes")
	hashrequest = api_call(url)
        print("\t[*] Store the "+file_type+" hashes in a JSON Format")
	storehashesjson(hashrequest)
	
	print ("\t[*] Malshare Done")

def storehashesjson(hashes):
        json_data = json.dumps(hashes.json(), sort_keys=True, indent=4, separators=(',', ': '))


        #Cont how many hashes?

        item_dict = json.loads(json_data)
        samples_count = len(item_dict)


        #Print Samples_Count
        print "\t[*] Samples Count = ", samples_count
        #Print in a well organized JSON format
        #print "\n********** Organized JSON\n",json_data,"\n**********\n"

        #Print in A Raw JSON Format
        #print "\n********** RAW JSON\n",item_dict,"\n**********\n"

        #Save OutPut in a JSON Format
        datetime = time.strftime("%Y-%m-%d")
        filename = "malshare"+datetime+".json"

        print "\t[*] Save Hashes Into File "+filename
        with open(filename,'w') as outfile:
                json.dump(item_dict, outfile)



	print ("\t[*] Download The Samples")

       # for i in range(0, samples_count):
        #        sha256= item_dict[i]['sha256']
        #        url= API_PATHS['DOWNLOAD']%(api_key, sha256)
        #        print url
        #        r = request.get(url)
        #        open(i+datetime+'.elf','wb').write(r.content)




def api_call(rpath):
        global malshare_api_key
        try:
                user_agent = {'User-Agent': 'MalShare API Tool v/0.1 beta'}
                r = requests.get(malshare_base_http_path+ rpath, headers=user_agent)
                if r.status_code == 200:
                        if standard_error_check(r.content):
                                return r
                               
                else:
                        if standard_error_check(r.content):
                                print ("[X] API Call Failed")
                                return None
                        else:
                                return None



        except Exception as e:
                print ("[X] API Call Failed: %s" % e)
                return None

def standard_error_check(rtext):
        if (rtext == "Sample not found"):
                print ("[X] Sample not Found")
                return False

        if (rtext == "ERROR! => Account not activated"):
                print ("[X] Bad API Key")
                return False

        if (rtext == "Invalid Hash"):
                print ("[X] Invalid Hash")
                return False

        if ( "Sample not found by hash" in rtext ):
                print ("[X] Hash not found")
                return False

        return True


if __name__ == "__main__":
        main()




